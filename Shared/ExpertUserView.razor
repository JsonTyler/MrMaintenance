@inject NavigationManager NavigationManager

@* Top Bar/Breadcrumb section *@
<div class="row text-white bg-dark">
    <div class="col-6 text-start">
        <span class="h5">Springbrook Software</span>
    </div>
    <div class="col-6 text-end">
        <button id="btn_NormalUserView" class="btn btn-link text-white h4" @onclick="@btn_NormalUserView_OnClick"
            title="Click to go back to normal user view">Maintenance</button>
        <span id="span_Breadcrumb" class="">
            >
            <i id="iBreadcrumb" class="fa fa-cog px-2 fa-lg" title="Tab setting is on"></i>
        </span>
    </div>
</div>

@* Toolbar/Form section *@
<div class="row">
    <div class="col-3"></div>
    <div id="background_Wrapper" class="py-2 col-6">
        <div class="row">
            <div class="col-12 d-inline text-end">
                <button id="btn_Save" class="btn btn-link">
                    <i id="iSave" class="fa fa-save fa-2x" title="Just for looks"></i>
                </button>
                <button id="btn_Refresh" class="btn btn-link" title="Reset the form" @onclick="btn_Reset_OnClick">
                    <i id="iRefresh" class="fa fa-refresh text-light fa-2x" title="Click to reset the form"></i>
                </button>
                <button id="btn_CogToggle" class="btn btn-link" @onclick="@btn_ExpertUserViewToggle_OnClick">
                    <i id="iCogToggle" class="fa fa-cog fa-2x" title="Click to toggle tab setting off"></i>
                </button>
            </div>
        </div>

        <div id="background" class="mb-3 px-3" ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);">
            <div id="section_title" class="pt-2">
                <div class="row">
                    <div class="col-12 h4 text-center">
                        <strong class="h3">@Title</strong>
                    </div>
                </div>
            </div>
            <div class="row mx-2">
                @foreach (var item in Models.OrderBy(x => x.Order))
                {
                    <div @ondrop="()=>HandleDrop(item)" @key="item" class=@item.Classes>
                        <div class="row pt-2">
                            <div class="col-11">
                                <div class="bg-dark text-white font-weight-bold rounded fp-1 pointer"
                                @ondragleave="@(()=> {item.IsDragOver = false;})"
                                @ondragenter="@(()=>{item.IsDragOver = true;})"
                                style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")"
                                @ondragstart="() => draggingModel = item" @ondragend="()=> draggingModel = null"
                                draggable="true" title="Grab and drag me to re-order">
                                    
                                @item.Name
                                </div>
                            </div>
                        </div>
                        <div class="row pb-1">
                            <div class="col">
                                @if (@item.Name.Contains("Date"))
                                {
                                    <input type="" class="form-control" onclick="(this.type='date')" />
                                }
                                else if (@item.Name.Contains("Number"))
                                {
                                    <input type="" class="form-control" onclick="(this.type='number')" />
                                }
                                else
                                {
                                    <input type="" class="form-control" onclick="(this.type='text')" />
                                }
                            </div>
                            <div class="col-1 text-center">
                                <button class="btn btn-link text-dark" title="Click to hide me" @onclick="(()=>btn_removeItem_OnClick(item))">
                                    <i class="fa fa-times fa-lg"></i>
                                </button>
                            </div>
                        </div>

                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col=3"></div>
</div>

@code
{
    // The title
    [Parameter]
    public string? Title { get; set; }

    // The list of models
    public List<Model> Models { get; set; } = new();
    
    // The model being dragged
    private Model? draggingModel;

    // The list of fields in the Maintenance form
    List<string> fields = new List<string>()
    {
        "Account Number",
        "Account Description",
        "Customer Number",
        "Transaction Date",
        "Due Date",
        "Reference Number",
        "Account Balance",
        "Outstanding Credits"
    };

    // The Model class
    public class Model
    {
        public string Classes { get; set; } = "";
        public int Order { get; set; }
        public string Name { get; set; } = "";
        public bool IsDragOver { get; set; }
    }

    /* Description: Synchronous method that gets executied when the component is
       initialized
       Behavior: Create a row in the form with the input/label for each field
       in the "fields" list
    */
    protected override void OnInitialized()
    {
        var i = 0;
        foreach (string field in fields)
        {
            Model m = new() { Classes = $"{field}", Order = i, Name = $"{field}" };
            Models.Add(m);
            i++;
        }
        base.OnInitialized();
    }

    /* Description: The HandleDrop method for the landingModel
       Behavior: Handles the drop when the user re-orders the list of fields
    */
    private void HandleDrop(Model landingModel)
    {
        if (draggingModel is null)
        {
            return;
        }

        // Keeps copy of original order in memory
        int originalOrderLanding = landingModel.Order;

        // Model under placemet of landing model is increased by 1
        Models.Where(x => x.Order >= landingModel.Order).ToList().ForEach(x => x.Order++);

        // Replaces landing model
        draggingModel.Order = originalOrderLanding;

        int j = 0;
        foreach (var model in Models.OrderBy(x => x.Order).ToList())
        {
            // Check to make sure #'s are from - to n-1
            model.Order = j++;

            // Removes the the drag over
            model.IsDragOver = false;
        }
    }


    /* Description: The OnClick event for the "Maintenance" breadcrumb
       Behavior: Redirects the user to the "Normal User View"
    */
    public void btn_NormalUserView_OnClick()
    {
        NavigationManager.NavigateTo("/");
    }

    /* Description: The OnClick event for the "Tab Settings Cog" icon
       Behavior: Redirects the user to the "Expert User View"
    */
    public void btn_ExpertUserViewToggle_OnClick()
    {
        NavigationManager.NavigateTo("/");
    }

    /* Description: The OnClick event for the "Reset" icon
       Behavior: Refreshes the page
    */
    public void btn_Reset_OnClick()
    {
        NavigationManager.NavigateTo("/ExpertUserView", true);
    }

    /* Description: The OnClick event for the "x" button for form fields
       Behavior: Hides an item from the Maintenace form
    */
    public void btn_removeItem_OnClick(Model formField)
    {
        Models.Remove(formField);
    }

}