@inject NavigationManager NavigationManager

@* Top Bar/Breadcrumb section *@
<div class="row text-white bg-dark">
    <div class="col-6 text-start">
        <span class="h5">Springbrook Software</span>
    </div>
    <div class="col-6 text-end">
        <button id="btn_NormalUserView" class="btn btn-link text-white h4"
            title="You are in the normal user view">Maintenance</button>
        <span id="span_Breadcrumb" class="">
        </span>
    </div>
</div>

@* Toolbar/Form section *@
<div class="row">
    <div class="col-3"></div>
    <div id="background_Wrapper" class="py-2 col-6">
        <div class="row">
            <div class="col-12 d-inline text-end">
                <button id="btn_Save" class="btn btn-link">
                    <i id="iSave" class="fa fa-save fa-2x" title="Just for looks"></i>
                </button>
                <button id="btn_CogToggle" class="btn btn-link" @onclick="@btn_ExpertUserViewToggle_OnClick">
                    <i id="iCogToggle" class="fa fa-cog fa-2x" title="Click to toggle tab setting on"></i>
                </button>
            </div>
        </div>

        <div id="background" class="mb-3" ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);">
            <div id="section_title" class="pt-2">
                <div class="row">
                    <div class="col-12 h4 text-center">
                        <strong class="h3">@Title</strong>
                    </div>
                </div>
            </div>
            <div class="row mx-2">
                @foreach (var item in Models.OrderBy(x => x.Order))
                {
                    <div @key="item">
                        <div class="row pt-2">
                            <div class="col-12">
                                <div class="bg-dark text-white rounded font-weight-bold fp-1" 
                                style="@(item.IsDragOver?"border-style: solid none none none; border-color:red;":"")">
                                    @item.Name
                                </div>
                            </div>
                        </div>
                        <div class="row pb-1">
                            <div class="col">
                                @if(@item.Name.Contains("Date")){
                                    <input type="" class="form-control" onclick="(this.type='date')" />
                                } else if(@item.Name.Contains("Number")) {
                                    <input type="" class="form-control" onclick="(this.type='number')" />
                                } else {
                                    <input type="" class="form-control" onclick="(this.type='text')" />
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-3"></div>
</div>

@code
{
    // The title
    [Parameter]
    public string? Title { get; set; }

    // The list of models
    public List<Model> Models { get; set; } = new();
    
    // The Model class
    public class Model
    {
        public int Order { get; set; }
        public string Name { get; set; } = "";
        public bool IsDragOver { get; set; }
    }

    // The list of fields in the Maintenance form
    List<string> fields = new List<string>()
    {
        "Account Number",
        "Account Description",
        "Customer Number",
        "Transaction Date",
        "Due Date",
        "Reference Number",
        "Account Balance",
        "Outstanding Credits"
    };

    /* Description: Synchronous method that gets executied when the component is
       initialized
       Behavior: Create a row in the form with the input/label for each field
       in the "fields" list
    */
    protected override void OnInitialized()
    {
        var i = 0;
        foreach (string field in fields)
        {
            Model m = new() { Order = i, Name = $"{field}"  };
            Models.Add(m);
            i++;
        }
        base.OnInitialized();
    }

    /* Description: The OnClick event for the "Tab Settings Cog" icon
       Behavior: Redirects the user to the "Expert User View"
    */
    public void btn_ExpertUserViewToggle_OnClick()
    {
        NavigationManager.NavigateTo("/ExpertUserView");
    }

}